<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://psy0231.github.io/</id><title>Null Section</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-03-10T23:50:50+09:00</updated> <author> <name>SooyongPark</name> <uri>https://psy0231.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://psy0231.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://psy0231.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 SooyongPark </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Docker 6 - Copy</title><link href="https://psy0231.github.io/posts/Docker_6_Copy/" rel="alternate" type="text/html" title="Docker 6 - Copy" /><published>2023-01-18T00:00:00+09:00</published> <updated>2023-01-18T00:00:00+09:00</updated> <id>https://psy0231.github.io/posts/Docker_6_Copy/</id> <content src="https://psy0231.github.io/posts/Docker_6_Copy/" /> <author> <name>{"name"=>"owner", "link"=>"https://github.com/psy0231"}</name> </author> <category term="Grind" /> <category term="Docker" /> <summary> Intro 생각보다 파일을 복사할일이좀 많더라. 문서보니까 잘 정리되어있길래. cp container - host간 파일 / 폴더 복사 양방항 가능. 명령어는 docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH 대충 이런식. docker cp py:/FromContainer.txt test docker cp test py:/ 왼쪽에 src 오른쪽이 dest, container의 경우 이름명시. 이정도. container실행여부는 상관없음. container끼리는 안됨.... </summary> </entry> <entry><title>Docker 5 - Exec / Attach</title><link href="https://psy0231.github.io/posts/Docker_5_Exec_Attach/" rel="alternate" type="text/html" title="Docker 5 - Exec / Attach" /><published>2023-01-17T00:00:00+09:00</published> <updated>2023-01-17T00:00:00+09:00</updated> <id>https://psy0231.github.io/posts/Docker_5_Exec_Attach/</id> <content src="https://psy0231.github.io/posts/Docker_5_Exec_Attach/" /> <author> <name>{"name"=>"owner", "link"=>"https://github.com/psy0231"}</name> </author> <category term="Grind" /> <category term="Docker" /> <summary> Intro 지금까지 -i -t를 써서 직접 조작하는 일이 많았다. 아무래도 테스트 중심이어서 그런가봄. 이때 container에 접속해야되는데 attach와 exec가 있다. 둘이 결과는 비슷하지만 좀 다름. 여기에서는 python container로함. docker create -i -t --name py python:latest docker stsrt py Exec Container에 명령을 실행한다. docker exec [OPTIONS] CONTAINER COMMAND [ARG...] docker exec py ps -ef UID PID PPID C STIME TTY ... </summary> </entry> <entry><title>Docker 4 - Container Option</title><link href="https://psy0231.github.io/posts/Docker_4_Container_Option/" rel="alternate" type="text/html" title="Docker 4 - Container Option" /><published>2023-01-11T00:00:00+09:00</published> <updated>2023-01-11T14:05:23+09:00</updated> <id>https://psy0231.github.io/posts/Docker_4_Container_Option/</id> <content src="https://psy0231.github.io/posts/Docker_4_Container_Option/" /> <author> <name>{"name"=>"owner", "link"=>"https://github.com/psy0231"}</name> </author> <category term="Grind" /> <category term="Docker" /> <summary> Container Option container의 실행부터 종료까지 명령어만 본다면 간단히 끝났다. create - start 와 run을 보면 선택적으로 option을 넣을 수 있었다. 이 때 들어가는 option이 좀 많은데 이미 image에 명시된 조건을 조정할 때 쓰이는것같다. create - start와 run은 결국엔 같은 기능이므로 대부분의 option을 공유한다. 자주 쓰는거 위주로 필요할때마다 추가. --name container name 지정 docker create --name tc2 tomcat:latest CONTAINER ID IMAGE COMMAND CREATED STATU... </summary> </entry> <entry><title>Docker 3 - Container</title><link href="https://psy0231.github.io/posts/Docker_3_Container/" rel="alternate" type="text/html" title="Docker 3 - Container" /><published>2023-01-09T00:00:00+09:00</published> <updated>2023-01-11T13:56:44+09:00</updated> <id>https://psy0231.github.io/posts/Docker_3_Container/</id> <content src="https://psy0231.github.io/posts/Docker_3_Container/" /> <author> <name>{"name"=>"owner", "link"=>"https://github.com/psy0231"}</name> </author> <category term="Grind" /> <category term="Docker" /> <summary> Intro image는 container를 생성하는데 필요한 모든 정보를 갖고있었다(inspect). container는 그 정보를 토대로 실행한다. 아무튼 image를 local로 pull한 뒤 부터. Create image에서 container를 생성. 실행은 하지 않는다. docker create [OPTIONS] IMAGE [COMMAND] [ARG...] 아무런 option없으면 알아서 만들어줌. 정상적으로 만들어지면 container id가 나오고 끝. docker create tomcat:latest 8bb7897eacbe81e7e7530dc2381083b8e8cfe253551b9fbd48b2... </summary> </entry> <entry><title>Docker 2 - Image</title><link href="https://psy0231.github.io/posts/Docker_2_Image/" rel="alternate" type="text/html" title="Docker 2 - Image" /><published>2023-01-02T00:00:00+09:00</published> <updated>2023-01-09T13:42:30+09:00</updated> <id>https://psy0231.github.io/posts/Docker_2_Image/</id> <content src="https://psy0231.github.io/posts/Docker_2_Image/" /> <author> <name>{"name"=>"owner", "link"=>"https://github.com/psy0231"}</name> </author> <category term="Grind" /> <category term="Docker" /> <summary> Intro 처음 docker을 사용할 때 image를 받는것부터 시작한다. dockerfile은 좀 나중에 다시하기로하고. Docker Hub - local까지 범위 Image 검색 여러가지로 Docker Hub에서 찾는게 편한데 조건이 별다른게 없으면 여기서 찾을 수 있음. docker search [OPTIONS] TERM 이름만 넣고 찾는게 편함. 예를들어 centos를 찾아보면 docker search centos NAME DESCRIPTION STARS OFFICIAL AUTOMATED centos ... </summary> </entry> </feed>
